from telegram import Bot
import json
import os
from datetime import datetime
import logging
import re
from telegram import (
    Bot,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    Contact
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("debug.log"),
        logging.StreamHandler()
    ]
)

import os

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
if not os.path.exists('zk-picture.jpg'):
    logging.error("–§–∞–π–ª 'zk-picture.jpg' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
# –¢–æ–∫–µ–Ω—ã –∏ ID —á–∞—Ç–æ–≤
MAIN_BOT_TOKEN = '7209568265:AAExH1wBnBOAtNFu3m0gRcd4xUv3hikav7U'
NOTIFICATION_BOT_TOKEN = '6874321311:AAHWMKv35bgYknrme_oMcpWAjH9vgVf9UgY'
LOG_FILE = 'user_log.json'
CHAT_ID = '-1002177666021'
 

firstqu = [
    ("–£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ? –í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –í–∞—Å –ø–ª–æ—â–∞–¥–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)", ["–°—Ç—É–¥–∏—è - 1–ö –∫–≤–∞—Ä—Ç–∏—Ä–∞", "2–ö –∫–≤–∞—Ä—Ç–∏—Ä–∞", "3–ö –∫–≤–∞—Ä—Ç–∏—Ä–∞", "4–ö –∏ –±–æ–ª–µ–µ –∫–≤–∞—Ä—Ç–∏—Ä–∞"]),
    ("–ö–∞–∫–æ–π —ç—Ç–∞–∂ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", ["–ü–µ—Ä–≤—ã–π", "–ü–æ—Å–µ—Ä–µ–¥–∏–Ω–µ", "–í–µ—Ä—Ö–Ω–∏–µ"]),
    ("–ö–∞–∫–∞—è —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã?", ["–ù–∞–ª–∏—á–Ω—ã–µ (—Ä–∞—Å—Å—Ä–æ—á–∫–∞)", "–ò–ø–æ—Ç–µ–∫–∞-–ì–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —É—Å–ª–æ–≤–∏—è–º"])
]
secondqu = [
    ("–¶–µ–ª—å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è (–º–æ–∂–Ω–æ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)", ["–î–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", "–° —Ü–µ–ª—å—é –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏", "–î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏/–∏–ª–∏ –¥–ª—è —Å–¥–∞—á–∏", "–î–µ—Ç—è–º, —Ä–æ–¥–∏—Ç–µ–ª—è–º, –±–ª–∏–∑–∫–∏–º"]),
    ("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω—ã (–º–æ–∂–Ω–æ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)", ["–Æ–∂–Ω—ã–π –±–µ—Ä–µ–≥ –ö—Ä—ã–º–∞", "–ö–µ—Ä—á–µ–Ω—Å–∫–∏–π –ø–æ–ª—É–æ—Å—Ç—Ä–æ–≤", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ä–∞–≤–Ω–∏–Ω–∞", "–ö–∞–ª–∞–º–∏—Ç—Å–∫–∏–π –∑–∞–ª–∏–≤", "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —á—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"]),
    ("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–æ–º–∞ (–º–æ–∂–Ω–æ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)", ["–ü—Ä–æ–µ–∫—Ç –∏–ª–∏ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –§–ó-214", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –§–ó-214 (—Å–¥–∞—á–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2-4 –≥–æ–¥–∞)", "–ù–∞ —ç—Ç–∞–ø–µ —Å–¥–∞—á–∏ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é –§–ó-214", "–°–¥–∞–Ω"]),
    ("–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—è–¥–æ–º —Å –ñ–ö (–º–æ–∂–Ω–æ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)", ["–î–µ—Ç—Å–∫–∏–π —Å–∞–¥, —à–∫–æ–ª–∞, –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞, —Ç—Ü", "–í–¥–∞–ª–∏ –æ—Ç —Å—É–µ—Ç—ã –∏ —à—É–º–∞", "–ë–ª–∏–∑–æ—Å—Ç—å –∫ –º–æ—Ä—é", "–í –≥–æ—Ä–∞—Ö –∏ –ª–µ—Å–Ω–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏"])
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_answers = {}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def ensure_log_file():
    if not os.path.exists(LOG_FILE):
        with open(LOG_FILE, 'w') as file:
            json.dump([], file)
    os.chmod(LOG_FILE, 0o666)

ensure_log_file()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def log_user_info(user, chat_id):
    try:
        user_info = {
            'user_id': user.id,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'username': user.username if user.username else f"ID_{user.id}",
            'language_code': user.language_code,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'answers': user_answers[chat_id]['answers'],
            'phone_number': user_answers[chat_id]['phone_number']
        }
        with open(LOG_FILE, 'r') as file:
            data = json.load(file)
        data.append(user_info)
        with open(LOG_FILE, 'w') as file:
            json.dump(data, file, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def send_notification(user, chat_id):
    try:
        notification_bot = Bot(token=NOTIFICATION_BOT_TOKEN)
        username_or_id = f"@{user.username}" if user.username else f"ID_{user.id}"
        initial_choice = user_answers[chat_id].get('initial_choice', '–í—ã–±–æ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω')  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–æ
        message = (
            f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ñ–ö –°–∫–∞–π-–ü–ª–∞–∑–∞ –±–æ—Ç:\n"
    f"–ò–º—è: {user_answers[chat_id]['name']}\n"  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–µ—Å—å
    f"Username/ID: {username_or_id}\n"
    f"–Ø–∑—ã–∫: {user.language_code}\n"
    f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
    f"–ù–∞—á–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä: {initial_choice}\n"
    f"–û—Ç–≤–µ—Ç—ã: {user_answers[chat_id]['answers']}\n"
    f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_answers[chat_id]['phone_number']}"
        )
        await notification_bot.send_message(chat_id=CHAT_ID, text=message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
       



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_welcome_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton('–°–æ–±—Ä–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø–æ –∂–∫', callback_data='catalog')],
        [InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é', callback_data='presentation')],
        [InlineKeyboardButton('–°—Ä–∞–≤–Ω–∏—Ç—å –ñ–ö –ö—Ä—ã–º–∞', callback_data='compare')]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
    await context.bot.send_photo(
        chat_id=chat_id, 
        photo='.\zk-picture.jpg', 
        caption="–ñ–ö –°–∫–∞–π –ü–ª–∞–∑–∞ –Ø–ª—Ç–∞, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—Å!"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ
    await context.bot.send_message(
        chat_id,
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {update.message.from_user.first_name}!\n"
        f"–Ø –ø–æ–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ñ–ö –°–∫–∞–π –ü–ª–∞–∑–∞ –Ø–ª—Ç–∞!\n"
        f"–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª–æ–≤–∏—è, —Ü–µ–Ω—ã, –ø–ª–∞–Ω–∏—Ä–æ–≤–∫—É –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ñ–ö. "
        f"–ë–æ–Ω—É—Å–æ–º –í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –ñ–ö –ö—Ä—ã–º–∞! üî•üî•",
        reply_markup=markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat.id
    if chat_id not in user_answers:
        user_answers[chat_id] = {
            'name': user.first_name,
            'user_id': user.id,
            'answers': [],
            'registered': False,
            'awaiting_phone': False,
            'phone_number': None
        }
    if not user_answers[chat_id]['registered']:
        await log_user_info(user, chat_id)
        
        
    else:
        await update.message.reply_text(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!")
    await send_welcome_message(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_question(bot: Bot, chat_id, question_index, question_list):
    question, options = question_list[question_index]
    keyboard = [
        [InlineKeyboardButton(option, callback_data=f"select_{question_index}_{i}")]
        for i, option in enumerate(options)
    ]
    keyboard.append([InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"continue_{question_index}")])
    markup = InlineKeyboardMarkup(keyboard)
    await bot.send_message(chat_id, question, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    await query.answer()

    if query.data.startswith('catalog'):
        user_answers[chat_id]['initial_choice'] = '–°–æ–±—Ä–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø–æ –∂–∫'  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        await send_question(context.bot, chat_id, 0, firstqu)  # –ü–µ—Ä–µ–¥–∞–µ–º –º–∞—Å—Å–∏–≤ firstqu
    elif query.data.startswith('presentation'):
        user_answers[chat_id]['initial_choice'] = '–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é'  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        user_answers[chat_id]['awaiting_phone'] = True
        await context.bot.send_message(
            chat_id,
            '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ',
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä ', request_contact=True)]],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
    elif query.data.startswith('compare'):
        user_answers[chat_id]['initial_choice'] = '–°—Ä–∞–≤–Ω–∏—Ç—å –ñ–ö –ö—Ä—ã–º–∞'  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        await send_question(context.bot, chat_id, 0, secondqu)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ secondqu
    elif query.data.startswith('select_'):
        question_index, option_index = map(int, query.data.split("_")[1:])
        current_question_list = firstqu if user_answers[chat_id]['initial_choice'] == '–°–æ–±—Ä–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø–æ –∂–∫' else secondqu
        option = current_question_list[question_index][1][option_index]
        if option not in user_answers[chat_id]['answers']:
            user_answers[chat_id]['answers'].append(option)
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {', '.join(user_answers[chat_id]['answers'])}\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.",
            reply_markup=query.message.reply_markup
        )
    elif query.data.startswith('continue_'):
        question_index = int(query.data.split("_")[1])
        current_question_list = firstqu if user_answers[chat_id]['initial_choice'] == '–°–æ–±—Ä–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø–æ –∂–∫' else secondqu
        if question_index < len(current_question_list) - 1:
            await send_question(context.bot, chat_id, question_index + 1, current_question_list)
        else:
            user_answers[chat_id]['awaiting_phone'] = True
            await context.bot.send_message(
                chat_id,
                '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–±–æ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ',
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact=True)]],
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
            )


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def is_valid_phone_number(phone_number):
    pattern = re.compile(r'^\+?\d{10,15}$')
    return pattern.match(phone_number) is not None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    user = update.message.from_user  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username = user.username  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if chat_id not in user_answers:
        user_answers[chat_id] = {'answers': [], 'registered': False}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if username:  # –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ
        user_answers[chat_id]['username'] = username  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    else:
        user_answers[chat_id]['username'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

    if chat_id in user_answers:
        user_state = user_answers[chat_id]

        if user_state.get('awaiting_phone'):
            if update.message.contact:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                contact: Contact = update.message.contact
                phone_number = contact.phone_number
            else:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                phone_number = update.message.text

            if is_valid_phone_number(phone_number):
                user_state['phone_number'] = phone_number
                user_state['awaiting_phone'] = False

                # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await context.bot.send_message(
                    chat_id,
                    '–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:'
                )
                user_state['awaiting_name'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
            else:
                await context.bot.send_message(
                    chat_id,
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.'
                )
        
        elif user_state.get('awaiting_name'):
            user_state['name'] = update.message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è
            user_state['awaiting_name'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏

            await context.bot.send_message(
                chat_id,
                f'–°–ø–∞—Å–∏–±–æ, {user_state["name"]}! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
                reply_markup=ReplyKeyboardMarkup([[]], one_time_keyboard=True)
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
            await send_notification(user, chat_id)
            user_answers[chat_id]['registered'] = True

# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ç–æ—Ä–æ–º—É –±–æ—Ç—É


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = ApplicationBuilder().token(MAIN_BOT_TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler('start', start))
application.add_handler(CallbackQueryHandler(handle_query))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
application.add_handler(MessageHandler(filters.CONTACT, handle_message))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    application.run_polling()